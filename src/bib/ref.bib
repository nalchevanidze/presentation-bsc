@misc{char-of-modern-web-app,
  author       = {Ardalis},
  month        = {12},
  title        = {Characteristics of modern web applications},
  url          = {https://docs.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/modern-web-applications-characteristics},
  urldate      = {2021-01-29},
  year         = {2020},
  organization = {Microsoft.com}
}

@misc{gql-spec,
  title        = {GraphQL},
  url          = {https://spec.graphql.org/June2018/},
  urldate      = {2021-02-08},
  year         = {2018},
  organization = {Graphql.org}
}

@misc{gql-spec-input-unions,
  author       = {GraphQL},
  month        = {11},
  title        = {graphql/graphql-spec},
  url          = {https://github.com/graphql/graphql-spec/blob/master/rfcs/InputUnion.md},
  urldate      = {2021-01-23},
  year         = {2020},
  organization = {GitHub}
}

@misc{schema-directives,
  author       = {GraphQL Tools},
  title        = {Schema directives | GraphQL Tools},
  url          = {https://www.graphql-tools.com/docs/schema-directives/},
  urldate      = {2021-01-23},
  year         = {2021},
  organization = {Graphql-tools.com}
}

@inproceedings{history-of-haskell,
  author    = {Peyton Jones, Simon},
  title     = {A History of Haskell: being lazy with class},
  booktitle = {The Third ACM SIGPLAN History of Programming Languages Conference (HOPL-III)},
  year      = {2007},
  month     = {06},
  url       = {https://www.microsoft.com/en-us/research/publication/a-history-of-haskell-being-lazy-with-class/},
  edition   = {The Third ACM SIGPLAN History of Programming Languages Conference (HOPL-III)}
}

@inproceedings{lw-ext-records,
  author       = {Jones, Mark P and Peyton Jones, Simon},
  title        = {Lightweight Extensible Records for Haskell},
  organization = {ACM},
  booktitle    = {Haskell Workshop},
  year         = {1999},
  month        = {October},
  publisher    = {ACM},
  url          = {https://www.microsoft.com/en-us/research/publication/lightweight-extensible-records-for-haskell/},
  note         = {Paris}
}

@article{trees-that-grow,
  author   = {Najd, Shayan and Peyton Jones, Simon},
  title    = {Trees that grow},
  year     = {2017},
  month    = {January},
  url      = {https://www.microsoft.com/en-us/research/publication/trees-that-grow/},
  pages    = {47-62},
  journal  = {Journal of Universal Computer Science (JUCS)},
  volume   = {23},
  chapter  = {1}
}

@techreport{derivable-type-classes,
  author   = {Hinze, Ralf and Peyton Jones, Simon},
  title    = {Derivable type classes},
  series   = {Technical Reports},
  year     = {2000},
  month    = {September},
  url      = {https://www.microsoft.com/en-us/research/publication/derivable-type-classes/},
  edition  = {Proceedings of the 2000 Haskell Workshop, Montreal},
  number   = {NOTTCS-TR-00-1},
  note     = {Proceedings of the Sixth Conference on Uncertainty in Artificial Intelligence (UAI1990)}
}

@inproceedings{migrating-to-gql,
  author = {Brito, Gleison and Mombach, Thais and Valente, Marco},
  year   = {2019},
  month  = {01},
  pages  = {},
  title  = {Migrating to GraphQL: A Practical Assessment},
  doi    = {10.1109/SANER.2019.8667986},
  url    = {https://www.researchgate.net/publication/330563526_Migrating_to_GraphQL_A_Practical_Assessment}
}

@inproceedings{initial-analysis-of-gql,
  author = {Hartig, Olaf},
  year   = {2017},
  month  = {06},
  pages  = {},
  title  = {An Initial Analysis of Facebook's GraphQL Language}
}

@inbook{datatype-generic-programming,
  author = {Gibbons, Jeremy},
  year   = {2007},
  month  = {11},
  pages  = {1-71},
  title  = {Datatype-Generic Programming},
  volume = {4719},
  doi    = {10.1007/978-3-540-76786-2_1}
}

@article{morph-gql-1,
  author  = {Chaves-Fraga, David and Priyatna, Freddy and Alobaid, Ahmad and Corcho, Oscar},
  year    = {2020},
  month   = {07},
  pages   = {1-19},
  title   = {Exploiting Declarative Mapping Rules for Generating GraphQL Servers with Morph-GraphQL},
  volume  = {30},
  journal = {International Journal of Software Engineering and Knowledge Engineering},
  doi     = {10.1142/S0218194020400070}
}

@online{gql-healthcare,
  author = {Mukhiya, Suresh and Rabbi, Fazle and Pun, Ka I Violet and Rutle, Adrian and Lamo, Yngve},
  year   = {2019},
  month  = {08},
  pages  = {},
  title  = {A GraphQL approach to Healthcare Information Exchange with HL7 FHIR},
  url    = {https://www.researchgate.net/publication/334988948_A_GraphQL_approach_to_Healthcare_Information_Exchange_with_HL7_FHIR}
}

@article{real-time-sys-arc-based-on-gql,
  author  = {Guo, Ying and Deng, Fang and Yang, Xiudong},
  year    = {2018},
  month   = {12},
  pages   = {012015},
  title   = {Design and Implementation of Real-Time Management System Architecture based on GraphQL},
  volume  = {466},
  journal = {IOP Conference Series: Materials Science and Engineering},
  doi     = {10.1088/1757-899X/466/1/012015},
  url     = {https://www.researchgate.net/publication/329971350_Design_and_Implementation_of_Real-Time_Management_System_Architecture_based_on_GraphQL}
}

@inproceedings{rest-vs-gql-controlled-experiment,
  author = {Brito, Gleison and Valente, Marco},
  year   = {2020},
  month  = {02},
  pages  = {},
  title  = {REST vs GraphQL: A Controlled Experiment},
  doi    = {10.1109/ICSA47634.2020.00016},
  url    = {https://www.researchgate.net/publication/339413273_REST_vs_GraphQL_A_Controlled_Experiment}
}

@inproceedings{edsl-modeling,
  author = {Bayol, Benoit and Chen, Yuting and Cournède, Paul-Henry},
  year   = {2013},
  month  = {07},
  pages  = {},
  title  = {Towards an EDSL to enhance good modelling practice for non-linear stochastic discrete dynamical models Application to plant growth models},
  doi    = {10.5220/0004481101320138}
}

@inproceedings{scrap-your-boilerplate,
  author    = {Lämmel, Ralf and Peyton Jones, Simon},
  title     = {Scrap your boilerplate: a practical approach to generic programming},
  booktitle = {ACM SIGPLAN International Workshop on Types in Language Design and Implementation (TLDI'03)},
  year      = {2003},
  month     = {January},
  abstract  = {We describe a design pattern that for writing programs that traverse data structures built from rich mutually-recursive data types. Such programs often have a great deal of "boilerplate" code that simply walks the structure, hiding a small amount of "real" code that constitutes the reason for the traversal.

Our technique allows most of this boilerplate to be written once and for all (perhaps even mechanically generated), leaving the programmer free to concentrate on the important part of the algorithm. These generic programs are much more robust to data structure evolution because they contain many fewer lines of type-specific code.

Our approach is simple to understand, reasonably efficient, and it handles all the data types found in conventional functional programming languages. It makes essential use of rank-2 polymorphism, an extension found in some implementations of Haskell.

 	PowerPoint slides},
  publisher = {ACM Press},
  url       = {https://www.microsoft.com/en-us/research/publication/scrap-your-boilerplate-a-practical-approach-to-generic-programming/},
  pages     = {26-37},
  edition   = {ACM SIGPLAN International Workshop on Types in Language Design and Implementation (TLDI'03)}
}